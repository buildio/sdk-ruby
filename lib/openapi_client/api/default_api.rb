=begin
#Build.io API V1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # list all config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v1_apps_app_id_or_name_config_vars_get(app_id_or_name, opts = {})
      api_v1_apps_app_id_or_name_config_vars_get_with_http_info(app_id_or_name, opts)
      nil
    end

    # list all config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_apps_app_id_or_name_config_vars_get_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_apps_app_id_or_name_config_vars_get ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.api_v1_apps_app_id_or_name_config_vars_get"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/config-vars'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_apps_app_id_or_name_config_vars_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_apps_app_id_or_name_config_vars_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # set or update config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :request_body 
    # @return [nil]
    def api_v1_apps_app_id_or_name_config_vars_patch(app_id_or_name, opts = {})
      api_v1_apps_app_id_or_name_config_vars_patch_with_http_info(app_id_or_name, opts)
      nil
    end

    # set or update config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :request_body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_apps_app_id_or_name_config_vars_patch_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_apps_app_id_or_name_config_vars_patch ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.api_v1_apps_app_id_or_name_config_vars_patch"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/config-vars'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_apps_app_id_or_name_config_vars_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_apps_app_id_or_name_config_vars_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create build
    # @param id [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v1_apps_id_builds_post(id, opts = {})
      api_v1_apps_id_builds_post_with_http_info(id, opts)
      nil
    end

    # create build
    # @param id [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_apps_id_builds_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_apps_id_builds_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_apps_id_builds_post"
      end
      # resource path
      local_var_path = '/api/v1/apps/{id}/builds'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_apps_id_builds_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_apps_id_builds_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # restart dynos
    # @param id [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v1_apps_id_dynos_delete(id, opts = {})
      api_v1_apps_id_dynos_delete_with_http_info(id, opts)
      nil
    end

    # restart dynos
    # @param id [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_apps_id_dynos_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_apps_id_dynos_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_v1_apps_id_dynos_delete"
      end
      # resource path
      local_var_path = '/api/v1/apps/{id}/dynos'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_apps_id_dynos_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_apps_id_dynos_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # identity
    # @param [Hash] opts the optional parameters
    # @return [ApiV1MeGet200Response]
    def api_v1_me_get(opts = {})
      data, _status_code, _headers = api_v1_me_get_with_http_info(opts)
      data
    end

    # identity
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiV1MeGet200Response, Integer, Hash)>] ApiV1MeGet200Response data, response status code and response headers
    def api_v1_me_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_me_get ...'
      end
      # resource path
      local_var_path = '/api/v1/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1MeGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_me_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_me_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a namespace
    # Create a namespace
    # @param [Hash] opts the optional parameters
    # @option opts [ApiV1NamespacesPostRequest] :api_v1_namespaces_post_request 
    # @return [nil]
    def api_v1_namespaces_post(opts = {})
      api_v1_namespaces_post_with_http_info(opts)
      nil
    end

    # create a namespace
    # Create a namespace
    # @param [Hash] opts the optional parameters
    # @option opts [ApiV1NamespacesPostRequest] :api_v1_namespaces_post_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_namespaces_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_namespaces_post ...'
      end
      # resource path
      local_var_path = '/api/v1/namespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'api_v1_namespaces_post_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_namespaces_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_namespaces_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # kubernetes oidc-login
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region 
    # @return [ApiV1OidcLoginGet200Response]
    def api_v1_oidc_login_get(opts = {})
      data, _status_code, _headers = api_v1_oidc_login_get_with_http_info(opts)
      data
    end

    # kubernetes oidc-login
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region 
    # @return [Array<(ApiV1OidcLoginGet200Response, Integer, Hash)>] ApiV1OidcLoginGet200Response data, response status code and response headers
    def api_v1_oidc_login_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_v1_oidc_login_get ...'
      end
      # resource path
      local_var_path = '/api/v1/oidc-login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1OidcLoginGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.api_v1_oidc_login_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_v1_oidc_login_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # show app
    # @param id [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [App]
    def app(id, opts = {})
      data, _status_code, _headers = app_with_http_info(id, opts)
      data
    end

    # show app
    # @param id [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def app_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.app ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.app"
      end
      # resource path
      local_var_path = '/api/v1/apps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'App'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list apps
    # List all apps
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id team id or name
    # @return [Array<App>]
    def apps(opts = {})
      data, _status_code, _headers = apps_with_http_info(opts)
      data
    end

    # list apps
    # List all apps
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id team id or name
    # @return [Array<(Array<App>, Integer, Hash)>] Array<App> data, response status code and response headers
    def apps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apps ...'
      end
      # resource path
      local_var_path = '/api/v1/apps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<App>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # show namespace
    # Show a namespace
    # @param id [String] Namespace name or ID
    # @param [Hash] opts the optional parameters
    # @return [Namespace]
    def namespace(id, opts = {})
      data, _status_code, _headers = namespace_with_http_info(id, opts)
      data
    end

    # show namespace
    # Show a namespace
    # @param id [String] Namespace name or ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Namespace, Integer, Hash)>] Namespace data, response status code and response headers
    def namespace_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.namespace ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.namespace"
      end
      # resource path
      local_var_path = '/api/v1/namespaces/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Namespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.namespace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#namespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list all namespaces
    # List all namespaces
    # @param [Hash] opts the optional parameters
    # @return [Array<Namespace>]
    def namespaces(opts = {})
      data, _status_code, _headers = namespaces_with_http_info(opts)
      data
    end

    # list all namespaces
    # List all namespaces
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Namespace>, Integer, Hash)>] Array<Namespace> data, response status code and response headers
    def namespaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.namespaces ...'
      end
      # resource path
      local_var_path = '/api/v1/namespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Namespace>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.namespaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#namespaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # show team
    # Show a team
    # @param id [String] Team name or ID
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def team(id, opts = {})
      data, _status_code, _headers = team_with_http_info(id, opts)
      data
    end

    # show team
    # Show a team
    # @param id [String] Team name or ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def team_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.team ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.team"
      end
      # resource path
      local_var_path = '/api/v1/teams/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list all teams
    # List all teams
    # @param [Hash] opts the optional parameters
    # @return [Array<Team>]
    def teams(opts = {})
      data, _status_code, _headers = teams_with_http_info(opts)
      data
    end

    # list all teams
    # List all teams
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.teams ...'
      end
      # resource path
      local_var_path = '/api/v1/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
