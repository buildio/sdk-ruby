=begin
#Build.io API V1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module BuildClient
  class ReviewAppsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create a review app
    # Creates a new review app for a pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReviewAppRequest] :create_review_app_request 
    # @return [App]
    def create_review_app(pipeline_id, opts = {})
      data, _status_code, _headers = create_review_app_with_http_info(pipeline_id, opts)
      data
    end

    # create a review app
    # Creates a new review app for a pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReviewAppRequest] :create_review_app_request 
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def create_review_app_with_http_info(pipeline_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewAppsApi.create_review_app ...'
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling ReviewAppsApi.create_review_app"
      end
      # resource path
      local_var_path = '/api/v1/pipelines/{pipeline_id}/review-apps'.sub('{' + 'pipeline_id' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_review_app_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'App'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReviewAppsApi.create_review_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewAppsApi#create_review_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a review app
    # Deletes a specific review app.
    # @param id [String] Review App ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_review_app(id, opts = {})
      delete_review_app_with_http_info(id, opts)
      nil
    end

    # delete a review app
    # Deletes a specific review app.
    # @param id [String] Review App ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_review_app_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewAppsApi.delete_review_app ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReviewAppsApi.delete_review_app"
      end
      # resource path
      local_var_path = '/api/v1/review-apps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReviewAppsApi.delete_review_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewAppsApi#delete_review_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get a specific review app
    # Retrieves details for a specific review app.
    # @param id [String] Review App ID
    # @param [Hash] opts the optional parameters
    # @return [App]
    def get_review_app(id, opts = {})
      data, _status_code, _headers = get_review_app_with_http_info(id, opts)
      data
    end

    # get a specific review app
    # Retrieves details for a specific review app.
    # @param id [String] Review App ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def get_review_app_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewAppsApi.get_review_app ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReviewAppsApi.get_review_app"
      end
      # resource path
      local_var_path = '/api/v1/review-apps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'App'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReviewAppsApi.get_review_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewAppsApi#get_review_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get review app by its app id
    # Retrieves details for a specific review app using its app ID.
    # @param app_id [String] App ID of the review app
    # @param [Hash] opts the optional parameters
    # @return [App]
    def get_review_app_by_app_id(app_id, opts = {})
      data, _status_code, _headers = get_review_app_by_app_id_with_http_info(app_id, opts)
      data
    end

    # get review app by its app id
    # Retrieves details for a specific review app using its app ID.
    # @param app_id [String] App ID of the review app
    # @param [Hash] opts the optional parameters
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def get_review_app_by_app_id_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewAppsApi.get_review_app_by_app_id ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling ReviewAppsApi.get_review_app_by_app_id"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id}/review-apps'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'App'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReviewAppsApi.get_review_app_by_app_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewAppsApi#get_review_app_by_app_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list review apps for a pipeline
    # Lists all review apps for a given pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @param [Hash] opts the optional parameters
    # @return [Array<App>]
    def list_review_apps(pipeline_id, opts = {})
      data, _status_code, _headers = list_review_apps_with_http_info(pipeline_id, opts)
      data
    end

    # list review apps for a pipeline
    # Lists all review apps for a given pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<App>, Integer, Hash)>] Array<App> data, response status code and response headers
    def list_review_apps_with_http_info(pipeline_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewAppsApi.list_review_apps ...'
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling ReviewAppsApi.list_review_apps"
      end
      # resource path
      local_var_path = '/api/v1/pipelines/{pipeline_id}/review-apps'.sub('{' + 'pipeline_id' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<App>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReviewAppsApi.list_review_apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewAppsApi#list_review_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
