=begin
#Build.io API V1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module BuildClient
  class DomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # clear all domains
    # Clear all custom domains from an app
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_domains(app_id_or_name, opts = {})
      clear_domains_with_http_info(app_id_or_name, opts)
      nil
    end

    # clear all domains
    # Clear all custom domains from an app
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clear_domains_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.clear_domains ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DomainsApi.clear_domains"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/domains'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DomainsApi.clear_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#clear_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create domain
    # Add a domain to an app
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDomainRequest] :create_domain_request 
    # @return [Domain]
    def create_domain(app_id_or_name, opts = {})
      data, _status_code, _headers = create_domain_with_http_info(app_id_or_name, opts)
      data
    end

    # create domain
    # Add a domain to an app
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDomainRequest] :create_domain_request 
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    def create_domain_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.create_domain ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DomainsApi.create_domain"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/domains'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_domain_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Domain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DomainsApi.create_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#create_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list domains
    # List all domains for an app (platform domain + custom domains)
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<Domain>]
    def list_domains(app_id_or_name, opts = {})
      data, _status_code, _headers = list_domains_with_http_info(app_id_or_name, opts)
      data
    end

    # list domains
    # List all domains for an app (platform domain + custom domains)
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Domain>, Integer, Hash)>] Array<Domain> data, response status code and response headers
    def list_domains_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.list_domains ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DomainsApi.list_domains"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/domains'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Domain>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DomainsApi.list_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#list_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # remove domain
    # Remove a domain from an app
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_domain(app_id_or_name, domain_id, opts = {})
      remove_domain_with_http_info(app_id_or_name, domain_id, opts)
      nil
    end

    # remove domain
    # Remove a domain from an app
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_domain_with_http_info(app_id_or_name, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.remove_domain ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DomainsApi.remove_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.remove_domain"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/domains/{domain_id}'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DomainsApi.remove_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#remove_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # show domain
    # Get detailed information about a specific domain
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @param [Hash] opts the optional parameters
    # @return [Domain]
    def show_domain(app_id_or_name, domain_id, opts = {})
      data, _status_code, _headers = show_domain_with_http_info(app_id_or_name, domain_id, opts)
      data
    end

    # show domain
    # Get detailed information about a specific domain
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    def show_domain_with_http_info(app_id_or_name, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.show_domain ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DomainsApi.show_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.show_domain"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/domains/{domain_id}'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Domain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DomainsApi.show_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#show_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update domain
    # Update a domain (e.g., change SSL certificate)
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDomainRequest] :update_domain_request 
    # @return [Domain]
    def update_domain(app_id_or_name, domain_id, opts = {})
      data, _status_code, _headers = update_domain_with_http_info(app_id_or_name, domain_id, opts)
      data
    end

    # update domain
    # Update a domain (e.g., change SSL certificate)
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDomainRequest] :update_domain_request 
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    def update_domain_with_http_info(app_id_or_name, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.update_domain ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DomainsApi.update_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.update_domain"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/domains/{domain_id}'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_domain_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Domain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DomainsApi.update_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#update_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
