=begin
#Build.io API V1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module BuildClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # show app
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [App]
    def app(app_id_or_name, opts = {})
      data, _status_code, _headers = app_with_http_info(app_id_or_name, opts)
      data
    end

    # show app
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def app_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.app ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.app"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'App'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list apps
    # List all apps
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id team id or name
    # @return [Array<App>]
    def apps(opts = {})
      data, _status_code, _headers = apps_with_http_info(opts)
      data
    end

    # list apps
    # List all apps
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id team id or name
    # @return [Array<(Array<App>, Integer, Hash)>] Array<App> data, response status code and response headers
    def apps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apps ...'
      end
      # resource path
      local_var_path = '/api/v1/apps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<App>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list all config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def config_vars(app_id_or_name, opts = {})
      data, _status_code, _headers = config_vars_with_http_info(app_id_or_name, opts)
      data
    end

    # list all config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def config_vars_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.config_vars ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.config_vars"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/config-vars'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.config_vars",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#config_vars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create app
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAppRequest] :create_app_request 
    # @return [App]
    def create_app(opts = {})
      data, _status_code, _headers = create_app_with_http_info(opts)
      data
    end

    # create app
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAppRequest] :create_app_request 
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def create_app_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_app ...'
      end
      # resource path
      local_var_path = '/api/v1/apps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_app_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'App'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create build
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBuildRequest] :create_build_request 
    # @return [nil]
    def create_build(app_id_or_name, opts = {})
      create_build_with_http_info(app_id_or_name, opts)
      nil
    end

    # create build
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBuildRequest] :create_build_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_build_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_build ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.create_build"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/builds'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_build_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a namespace
    # Create a namespace
    # @param [Hash] opts the optional parameters
    # @option opts [CreateNamespaceRequest] :create_namespace_request 
    # @return [Namespace]
    def create_namespace(opts = {})
      data, _status_code, _headers = create_namespace_with_http_info(opts)
      data
    end

    # create a namespace
    # Create a namespace
    # @param [Hash] opts the optional parameters
    # @option opts [CreateNamespaceRequest] :create_namespace_request 
    # @return [Array<(Namespace, Integer, Hash)>] Namespace data, response status code and response headers
    def create_namespace_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_namespace ...'
      end
      # resource path
      local_var_path = '/api/v1/namespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_namespace_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Namespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_namespace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_namespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete config-var
    # Delete a config-var
    # @param app_id_or_name [String] app id or name
    # @param key [String] config var key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_config_var(app_id_or_name, key, opts = {})
      delete_config_var_with_http_info(app_id_or_name, key, opts)
      nil
    end

    # delete config-var
    # Delete a config-var
    # @param app_id_or_name [String] app id or name
    # @param key [String] config var key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_config_var_with_http_info(app_id_or_name, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_config_var ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.delete_config_var"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.delete_config_var"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/config-vars/{key}'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s)).sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_config_var",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_config_var\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a namespace
    # Delete a namespace
    # @param namespace_id_or_name [String] Namespace name or ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_namespace(namespace_id_or_name, opts = {})
      delete_namespace_with_http_info(namespace_id_or_name, opts)
      nil
    end

    # delete a namespace
    # Delete a namespace
    # @param namespace_id_or_name [String] Namespace name or ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_namespace_with_http_info(namespace_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_namespace ...'
      end
      # verify the required parameter 'namespace_id_or_name' is set
      if @api_client.config.client_side_validation && namespace_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'namespace_id_or_name' when calling DefaultApi.delete_namespace"
      end
      # resource path
      local_var_path = '/api/v1/namespaces/{namespace_id_or_name}'.sub('{' + 'namespace_id_or_name' + '}', CGI.escape(namespace_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_namespace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_namespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # exec into dyno
    # @param app_id_or_name [String] app id or name
    # @param dyno [String] dyno name
    # @param dyno_exec_request [DynoExecRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DynoExecResponse]
    def exec_dyno(app_id_or_name, dyno, dyno_exec_request, opts = {})
      data, _status_code, _headers = exec_dyno_with_http_info(app_id_or_name, dyno, dyno_exec_request, opts)
      data
    end

    # exec into dyno
    # @param app_id_or_name [String] app id or name
    # @param dyno [String] dyno name
    # @param dyno_exec_request [DynoExecRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynoExecResponse, Integer, Hash)>] DynoExecResponse data, response status code and response headers
    def exec_dyno_with_http_info(app_id_or_name, dyno, dyno_exec_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exec_dyno ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.exec_dyno"
      end
      # verify the required parameter 'dyno' is set
      if @api_client.config.client_side_validation && dyno.nil?
        fail ArgumentError, "Missing the required parameter 'dyno' when calling DefaultApi.exec_dyno"
      end
      # verify the required parameter 'dyno_exec_request' is set
      if @api_client.config.client_side_validation && dyno_exec_request.nil?
        fail ArgumentError, "Missing the required parameter 'dyno_exec_request' when calling DefaultApi.exec_dyno"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/dynos/{dyno}/exec'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s)).sub('{' + 'dyno' + '}', CGI.escape(dyno.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dyno_exec_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DynoExecResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.exec_dyno",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exec_dyno\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list dynos
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<Dyno>]
    def list_dynos(app_id_or_name, opts = {})
      data, _status_code, _headers = list_dynos_with_http_info(app_id_or_name, opts)
      data
    end

    # list dynos
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Dyno>, Integer, Hash)>] Array<Dyno> data, response status code and response headers
    def list_dynos_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_dynos ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.list_dynos"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/dynos/list'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Dyno>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_dynos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_dynos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # identity
    # @param [Hash] opts the optional parameters
    # @return [MeResponse]
    def me(opts = {})
      data, _status_code, _headers = me_with_http_info(opts)
      data
    end

    # identity
    # @param [Hash] opts the optional parameters
    # @return [Array<(MeResponse, Integer, Hash)>] MeResponse data, response status code and response headers
    def me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.me ...'
      end
      # resource path
      local_var_path = '/api/v1/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.me",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # show namespace
    # Show a namespace
    # @param namespace_id_or_name [String] Namespace name or ID
    # @param [Hash] opts the optional parameters
    # @return [Namespace]
    def namespace(namespace_id_or_name, opts = {})
      data, _status_code, _headers = namespace_with_http_info(namespace_id_or_name, opts)
      data
    end

    # show namespace
    # Show a namespace
    # @param namespace_id_or_name [String] Namespace name or ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Namespace, Integer, Hash)>] Namespace data, response status code and response headers
    def namespace_with_http_info(namespace_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.namespace ...'
      end
      # verify the required parameter 'namespace_id_or_name' is set
      if @api_client.config.client_side_validation && namespace_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'namespace_id_or_name' when calling DefaultApi.namespace"
      end
      # resource path
      local_var_path = '/api/v1/namespaces/{namespace_id_or_name}'.sub('{' + 'namespace_id_or_name' + '}', CGI.escape(namespace_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Namespace'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.namespace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#namespace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list all namespaces
    # List all namespaces
    # @param [Hash] opts the optional parameters
    # @return [Array<Namespace>]
    def namespaces(opts = {})
      data, _status_code, _headers = namespaces_with_http_info(opts)
      data
    end

    # list all namespaces
    # List all namespaces
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Namespace>, Integer, Hash)>] Array<Namespace> data, response status code and response headers
    def namespaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.namespaces ...'
      end
      # resource path
      local_var_path = '/api/v1/namespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Namespace>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.namespaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#namespaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # kubernetes oidc-login
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region 
    # @return [OidcLoginResponse]
    def oidc_login(opts = {})
      data, _status_code, _headers = oidc_login_with_http_info(opts)
      data
    end

    # kubernetes oidc-login
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region 
    # @return [Array<(OidcLoginResponse, Integer, Hash)>] OidcLoginResponse data, response status code and response headers
    def oidc_login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.oidc_login ...'
      end
      # resource path
      local_var_path = '/api/v1/oidc-login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OidcLoginResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.oidc_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#oidc_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # restart all dynos
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restart_all_dynos(app_id_or_name, opts = {})
      restart_all_dynos_with_http_info(app_id_or_name, opts)
      nil
    end

    # restart all dynos
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def restart_all_dynos_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.restart_all_dynos ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.restart_all_dynos"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/dynos'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.restart_all_dynos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#restart_all_dynos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # restart specific dyno
    # @param app_id_or_name [String] app id or name
    # @param dyno [String] dyno name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def restart_dynos(app_id_or_name, dyno, opts = {})
      restart_dynos_with_http_info(app_id_or_name, dyno, opts)
      nil
    end

    # restart specific dyno
    # @param app_id_or_name [String] app id or name
    # @param dyno [String] dyno name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def restart_dynos_with_http_info(app_id_or_name, dyno, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.restart_dynos ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.restart_dynos"
      end
      # verify the required parameter 'dyno' is set
      if @api_client.config.client_side_validation && dyno.nil?
        fail ArgumentError, "Missing the required parameter 'dyno' when calling DefaultApi.restart_dynos"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/dynos/{dyno}'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s)).sub('{' + 'dyno' + '}', CGI.escape(dyno.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.restart_dynos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#restart_dynos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # set or update config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :request_body 
    # @return [nil]
    def set_config_vars(app_id_or_name, opts = {})
      set_config_vars_with_http_info(app_id_or_name, opts)
      nil
    end

    # set or update config-vars
    # @param app_id_or_name [String] app id or name
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :request_body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_config_vars_with_http_info(app_id_or_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_config_vars ...'
      end
      # verify the required parameter 'app_id_or_name' is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_id_or_name' when calling DefaultApi.set_config_vars"
      end
      # resource path
      local_var_path = '/api/v1/apps/{app_id_or_name}/config-vars'.sub('{' + 'app_id_or_name' + '}', CGI.escape(app_id_or_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.set_config_vars",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_config_vars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # show team
    # Show a team
    # @param id [String] Team name or ID
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def team(id, opts = {})
      data, _status_code, _headers = team_with_http_info(id, opts)
      data
    end

    # show team
    # Show a team
    # @param id [String] Team name or ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def team_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.team ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.team"
      end
      # resource path
      local_var_path = '/api/v1/teams/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list all teams
    # List all teams
    # @param [Hash] opts the optional parameters
    # @return [Array<Team>]
    def teams(opts = {})
      data, _status_code, _headers = teams_with_http_info(opts)
      data
    end

    # list all teams
    # List all teams
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.teams ...'
      end
      # resource path
      local_var_path = '/api/v1/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
