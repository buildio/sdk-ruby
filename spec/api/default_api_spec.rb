=begin
#Build.io API V1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'

# Unit tests for BuildClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = BuildClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(BuildClient::DefaultApi)
    end
  end

  # unit tests for app
  # show app
  # @param app_id_or_name app id or name
  # @param [Hash] opts the optional parameters
  # @return [App]
  describe 'app test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for apps
  # list apps
  # List all apps
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id team id or name
  # @return [Array<App>]
  describe 'apps test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for config_vars
  # list all config-vars
  # @param app_id_or_name app id or name
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, String>]
  describe 'config_vars test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_app
  # create app
  # @param [Hash] opts the optional parameters
  # @option opts [CreateAppRequest] :create_app_request 
  # @return [App]
  describe 'create_app test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_build
  # create build
  # @param app_id_or_name app id or name
  # @param [Hash] opts the optional parameters
  # @option opts [CreateBuildRequest] :create_build_request 
  # @return [nil]
  describe 'create_build test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespace
  # create a namespace
  # Create a namespace
  # @param [Hash] opts the optional parameters
  # @option opts [CreateNamespaceRequest] :create_namespace_request 
  # @return [Namespace]
  describe 'create_namespace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_config_var
  # delete config-var
  # Delete a config-var
  # @param app_id_or_name app id or name
  # @param key config var key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_config_var test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespace
  # delete a namespace
  # Delete a namespace
  # @param namespace_id_or_name Namespace name or ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_namespace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for exec_dyno
  # exec into dyno
  # @param app_id_or_name app id or name
  # @param dyno dyno name
  # @param dyno_exec_request 
  # @param [Hash] opts the optional parameters
  # @return [DynoExecResponse]
  describe 'exec_dyno test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_dynos
  # list dynos
  # @param app_id_or_name app id or name
  # @param [Hash] opts the optional parameters
  # @return [Array<Dyno>]
  describe 'list_dynos test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for me
  # identity
  # @param [Hash] opts the optional parameters
  # @return [MeResponse]
  describe 'me test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for namespace
  # show namespace
  # Show a namespace
  # @param namespace_id_or_name Namespace name or ID
  # @param [Hash] opts the optional parameters
  # @return [Namespace]
  describe 'namespace test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for namespaces
  # list all namespaces
  # List all namespaces
  # @param [Hash] opts the optional parameters
  # @return [Array<Namespace>]
  describe 'namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for oidc_login
  # kubernetes oidc-login
  # @param [Hash] opts the optional parameters
  # @option opts [String] :region 
  # @return [OidcLoginResponse]
  describe 'oidc_login test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for restart_all_dynos
  # restart all dynos
  # @param app_id_or_name app id or name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'restart_all_dynos test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for restart_dynos
  # restart specific dyno
  # @param app_id_or_name app id or name
  # @param dyno dyno name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'restart_dynos test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_config_vars
  # set or update config-vars
  # @param app_id_or_name app id or name
  # @param [Hash] opts the optional parameters
  # @option opts [Hash<String, String>] :request_body 
  # @return [nil]
  describe 'set_config_vars test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for team
  # show team
  # Show a team
  # @param id Team name or ID
  # @param [Hash] opts the optional parameters
  # @return [Team]
  describe 'team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for teams
  # list all teams
  # List all teams
  # @param [Hash] opts the optional parameters
  # @return [Array<Team>]
  describe 'teams test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
